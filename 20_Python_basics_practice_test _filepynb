{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e34ae76d-057a-4c3f-a14f-c52e4ed71e09",
   "metadata": {},
   "source": [
    "# TOPIC: String Based Assignment Problem"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d64566e5-da01-45fa-b897-d1fd5accf541",
   "metadata": {},
   "source": [
    "# 1. Write a program to reverse a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2d5616c0-2896-4909-9a2f-6106ed4a8afa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hgniStihoM\n"
     ]
    }
   ],
   "source": [
    "name = 'MohitSingh'\n",
    "rev_String = name[::-1]\n",
    "print(rev_String)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a0a25b8-c9e0-47c0-8a9a-fd4ef41543c8",
   "metadata": {},
   "source": [
    "## 2. Check if a string is a palindrome."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "80e39a7d-db6a-46c5-a97d-31718a73cd06",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please enter string to check palindrome.. mom\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input String is palindrome \n"
     ]
    }
   ],
   "source": [
    "inputString = input(\"Please enter string to check palindrome..\")\n",
    "\n",
    "revString = inputString[::-1]\n",
    "\n",
    "if revString == inputString:\n",
    "    print (\"Input String is palindrome \")\n",
    "else:\n",
    "    print (\"Input String is not a palindrome String\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5dcdcd75-ae50-4b17-a990-3e633e7e745c",
   "metadata": {},
   "source": [
    "## 3. Convert a string to uppercase."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2ff758ee-4d58-464f-9304-fe2b7bcb9f40",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MOHITSINGH\n"
     ]
    }
   ],
   "source": [
    "name = 'MohitSingh'\n",
    "converToUpper = name.upper()\n",
    "print(converToUpper)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c84e64f-7b50-47a4-be04-7c4e59cddec5",
   "metadata": {},
   "source": [
    "## 4. Convert a string to lowercase."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bc10a45e-df9d-494f-b5c2-b65ab109092f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mohitsingh\n"
     ]
    }
   ],
   "source": [
    "name = 'MohitSingh'\n",
    "converToLower = name.lower()\n",
    "print(converToLower)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12d3406b-90a4-4821-901f-76f957c9a330",
   "metadata": {},
   "source": [
    "## 5. Count the number of vowels in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b043e786-b38e-4488-aabe-67ea793916e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please enter string.. mohitSingh\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Vowels Count  3\n"
     ]
    }
   ],
   "source": [
    "def count_Voewls(inputString):\n",
    "    vowelsString = 'AEIOUaeiou'\n",
    "    count = 0\n",
    "\n",
    "    for char in inputString:\n",
    "        if char in vowelsString:\n",
    "            count +=1\n",
    "    return count\n",
    "\n",
    "\n",
    "inputString = input(\"Please enter string..\")\n",
    "vowelsCount = count_Voewls(inputString)\n",
    "print(\"Vowels Count \",vowelsCount)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2de0a38a-bb52-4f7b-b6da-54e89fcd9899",
   "metadata": {},
   "source": [
    "## 6. Count the number of consonants in a string.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2d811923-6db3-437b-9f10-4dd419195c77",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "please enter string to count consants jkhj\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "inputString = input(\"please enter string to count consants\")\n",
    "totalConstant = count_consonants(inputString)\n",
    "print(totalConstant)\n",
    "\n",
    "def count_consonants(inputString):\n",
    "    vowelsString = 'AEIOUaeiou'\n",
    "    count =0\n",
    "    \n",
    "    for char in inputString:\n",
    "        if char not in vowelsString:\n",
    "            count +=1\n",
    "    return count\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "732e9436-ff1a-443e-8388-dbf3af549e06",
   "metadata": {},
   "source": [
    "## 7. Remove all whitespaces from a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d1ec9670-b72f-4284-ab23-e05450866a89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "HiMyNameisMohitKumar\n"
     ]
    }
   ],
   "source": [
    "str = \"Hi My Name is Mohit Kumar\"\n",
    "\n",
    "strNew = str.replace(\" \",\"\")\n",
    "\n",
    "print(strNew)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ed14b10-f966-452b-9ccd-a1532615e765",
   "metadata": {},
   "source": [
    "## 8. Find the length of a string without using the `len()` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f5a6c284-cf0f-4465-a01f-ba79b7201cbc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    }
   ],
   "source": [
    "str = \"MohitSingh\"\n",
    "count = 0\n",
    "\n",
    "for char in str:\n",
    "    count +=1\n",
    "print(count)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92a70e0e-672f-41f2-96e7-bdd5ef32dddd",
   "metadata": {},
   "source": [
    "## 9. Check if a string contains a specific word."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "599dfe1a-8ca4-472b-97de-851f8a5e3328",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "present\n"
     ]
    }
   ],
   "source": [
    "str = \"Hi My Name is Mohit Kumar\"\n",
    "\n",
    "if 'Mohit' in str:\n",
    "    print(\"present\")\n",
    "else:\n",
    "    print(\"Not Present\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8508d369-778f-42bd-b1b4-5276687fe775",
   "metadata": {},
   "source": [
    "## 10. Replace a word in a string with another word."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f521558c-35d1-4353-9569-72b86ba7ae7a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hi My Name is Kishu Kumar\n"
     ]
    }
   ],
   "source": [
    "str = \"Hi My Name is Mohit Kumar\"\n",
    "\n",
    "newStr = str.replace(\"Mohit\",\"Kishu\")\n",
    "print(newStr)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8429d94-cea1-436e-8736-91efdc5397d8",
   "metadata": {},
   "source": [
    "## 11. Count the occurrences of a word in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ced6190a-67a5-4bf4-8b20-948a1b4c63f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "str = \"Hi My Name is Mohit Kumar is \"\n",
    "count = 0\n",
    "string_to_count = 'is'\n",
    "\n",
    "count = str.count(string_to_count)\n",
    "\n",
    "print(count)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b8173ae-369e-460f-9d29-412b90771465",
   "metadata": {},
   "source": [
    "## 12. Find the first occurrence of a word in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "87fe9375-8a18-47ab-bacd-fd410eb891d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14\n"
     ]
    }
   ],
   "source": [
    "str = \"Hi My Name is Mohit  Kumar.Mohit Lives in BLR \"\n",
    "count = 0\n",
    "string_to_find = 'Mohit'\n",
    "\n",
    "index = str.find(string_to_find)\n",
    "print(index)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7317aeb-32be-499f-854d-9d3108c4fabc",
   "metadata": {},
   "source": [
    "## 13. Find the last occurrence of a word in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "a1af1762-f47b-4018-b0b6-a9d316ceac6b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "46\n"
     ]
    }
   ],
   "source": [
    "str = \"Hi My Name is Mohit  Kumar.Mohit Lives in BLR Mohit\"\n",
    "count = 0\n",
    "string_to_find = 'Mohit'\n",
    "\n",
    "index = str.rfind(string_to_find)\n",
    "print(index)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e375d166-c571-47b4-8429-ef8964ea14a1",
   "metadata": {},
   "source": [
    "## 14. Split a string into a list of words.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1649ea7b-db3e-40d9-a58c-893f8b3fd31d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hi My Name is Mohit Kumar.Mohit Lives in BLR Mohit \n"
     ]
    }
   ],
   "source": [
    "word_list = ['Hi', 'My', 'Name', 'is', 'Mohit', 'Kumar.Mohit', 'Lives', 'in', 'BLR', 'Mohit']\n",
    "\n",
    "listOfWord=\"\"\n",
    "\n",
    "for word in word_list:\n",
    "    listOfWord +=word+\" \"\n",
    "    \n",
    "print(listOfWord)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee17e188-768a-44a8-b86c-821b307c9765",
   "metadata": {},
   "source": [
    "## 15. Join a list of words into a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "b8cb26e3-65f6-4845-a200-8c9ac095efa4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "HiMyNameisMohitKumar.MohitLivesinBLRMohit\n"
     ]
    }
   ],
   "source": [
    "word_list = ['Hi', 'My', 'Name', 'is', 'Mohit', 'Kumar.Mohit', 'Lives', 'in', 'BLR', 'Mohit']\n",
    "\n",
    "listOfWord=\"\"\n",
    "\n",
    "for word in word_list:\n",
    "    listOfWord +=word+\"\"\n",
    "    \n",
    "print(listOfWord)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca93e2fd-721c-48c2-a4a0-de307cebb1d8",
   "metadata": {},
   "source": [
    "## 16. Convert a string where words are separated by spaces to one where words are separated by underscores."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "17e5b58c-4e09-46ee-82c9-b558c2663f26",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hi_My_Name_is_Mohit_Kumar.Mohit_Lives_in_BLR_Mohit\n"
     ]
    }
   ],
   "source": [
    "str = \"Hi My Name is Mohit Kumar.Mohit Lives in BLR Mohit\"\n",
    "\n",
    "strNew = str.replace(\" \",\"_\")\n",
    "print(strNew)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3a0cc90-10b1-4d6b-bff0-226a78f70fdb",
   "metadata": {},
   "source": [
    "## 17. Check if a string starts with a specific word or phrase."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "cc44ed54-1e2a-49b1-898a-577e66d43d80",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "string strat with specific word\n"
     ]
    }
   ],
   "source": [
    "str = \"Hi My Name is Mohit Kumar.Mohit Lives in BLR Mohit\"\n",
    "\n",
    "word = 'Hi'\n",
    "\n",
    "if str.startswith(word):\n",
    "    print(\"string strat with specific word\")\n",
    "else:\n",
    "    print(\"specific word not present\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fe82471-277f-4bba-b33f-cd0146a3e966",
   "metadata": {},
   "source": [
    "## 18. Check if a string ends with a specific word or phrase."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "00538b8d-f3b4-4218-bb49-7570637f8aa8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "string End with specific word\n"
     ]
    }
   ],
   "source": [
    "str = \"Hi My Name is Mohit Kumar.Mohit Lives in BLR Mohit\"\n",
    "\n",
    "word = 'Mohit'\n",
    "\n",
    "if str.endswith(word):\n",
    "    print(\"string End with specific word\")\n",
    "else:\n",
    "    print(\"String didn't end with specific word \")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3a4a620-70ff-4d28-8a9c-a44b774cba14",
   "metadata": {},
   "source": [
    "## 19. Convert a string to title case (e.g., \"hello world\" to \"Hello World\")."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "98c2fa68-c538-4640-b42a-1b563baa7550",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello World !\n"
     ]
    }
   ],
   "source": [
    "str = \"hello World !\"\n",
    "newString = str.title()\n",
    "print(newString)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3d4ff4d-ee17-40e3-8d15-d2f25a85e6da",
   "metadata": {},
   "source": [
    "## 20. Find the longest word in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "3ac29947-0041-49d9-86dc-8ff5c7457bb4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fgdhdujhutyurde\n"
     ]
    }
   ],
   "source": [
    "str = \"Find the longest word in a string fgdhdujhutyurde\"\n",
    "\n",
    "str_list = str.split()\n",
    "\n",
    "longestWord = max(str_list,key=len)\n",
    "print (longestWord)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "615940c3-a005-4732-9eaa-f9fd412b7eac",
   "metadata": {},
   "source": [
    "## 21. Find the shortest word in a string."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfaf2228-041e-4484-bdf4-c5d88ecdba44",
   "metadata": {},
   "source": [
    "str = \"Find the longest word in a string fgdhdujhutyurde\"\n",
    "str_list = str.split()\n",
    "shortestWord = min(str_list,key=len)\n",
    "print (shortestWord)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15bc78f9-6d04-4eec-81df-a5a5affc5f7f",
   "metadata": {},
   "source": [
    "## 22. Reverse the order of words in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "eaeba43d-e928-4f75-89fa-cb5c0999c13c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "string a in word longest the Find\n"
     ]
    }
   ],
   "source": [
    "str = \"Find the longest word in a string\"\n",
    "\n",
    "str_list = str.split()\n",
    "revString_list = str_list[::-1]\n",
    "revString = \" \".join(revString_list)\n",
    "print(revString)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "009ceb92-9cc5-4d69-a3c0-cdb4da0689a4",
   "metadata": {},
   "source": [
    "## 23. Check if a string is alphanumeric."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "f28b6de0-c370-4851-83e1-d0d75898a8a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'abc123' is alphanumeric.\n"
     ]
    }
   ],
   "source": [
    "input_string = \"abc123\"\n",
    "if input_string.isalnum():\n",
    "    print(f\"'{input_string}' is alphanumeric.\")\n",
    "else:\n",
    "    print(f\"'{input_string}' is not alphanumeric.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e1acd9e-40de-4ff2-aa06-f4d8809b6c55",
   "metadata": {},
   "source": [
    "## 24. Extract all digits from a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "fdfd2620-5eff-4eec-8088-80bdfc8ec2df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 1\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "string = \"MohitSingh21\"\n",
    "\n",
    "reDigit = re.findall(r'[0-9]',string)\n",
    "\n",
    "digit = \" \".join(reDigit)\n",
    "print(digit)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c83f9ed-f240-409a-9fd5-32b43b14ab9e",
   "metadata": {},
   "source": [
    "## 25. Extract all alphabets from a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7c0b49f6-14d1-4c4e-972f-7dc9e1d7e757",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MohitSingh\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "string = \"MohitSingh21\"\n",
    "\n",
    "reString = re.findall(r'[A-Za-z]',string)\n",
    "\n",
    "string = \"\".join(reString)\n",
    "print(string)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d96b4b73-9cac-4420-ad9d-76c2efae019a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(string)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ecb08b8-bf7b-4009-8dab-64144e023c41",
   "metadata": {},
   "source": [
    "## 26. Count the number of uppercase letters in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ab45d387-b6ac-4c43-b89b-2701736158f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "string = \"MohitSingh21\"\n",
    "\n",
    "upperCaseLetter = re.findall(r'[A-Z]',string)\n",
    "upperCaseLetter =\"\".join(upperCaseLetter)\n",
    "\n",
    "lenght = len(upperCaseLetter)\n",
    "print(lenght)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "533c625c-4045-4bf8-944d-eb5fa5333dbf",
   "metadata": {},
   "source": [
    "## 27. Count the number of lowercase letters in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c8e49450-fcf1-4261-a5db-a4d31b3bc8a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "string = \"MohitSingh21\"\n",
    "\n",
    "upperCaseLetter = re.findall(r'[a-z]',string)\n",
    "upperCaseLetter =\"\".join(upperCaseLetter)\n",
    "\n",
    "lenght = len(upperCaseLetter)\n",
    "print(lenght)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ae4b78c-2304-4ce2-94f3-b1ebd18fe516",
   "metadata": {},
   "source": [
    "## 28. Swap the case of each character in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c43f67a8-6370-4e6e-99ee-1a9b6a19904b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mOHITsINGH21\n"
     ]
    }
   ],
   "source": [
    "string = \"MohitSingh21\"\n",
    "\n",
    "swapStr = string.swapcase()\n",
    "print(swapStr)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b1e9918-ce3c-4e89-8e7a-22deee1b5e31",
   "metadata": {},
   "source": [
    "## 29. Remove a specific word from a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "066a9830-f97f-4ba1-ab77-8f6c7b0dbbb1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mohitngh21\n"
     ]
    }
   ],
   "source": [
    "string = \"MohitSingh21\"\n",
    "\n",
    "newString = string.replace(\"Si\",\"\")\n",
    "print(newString)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cb1d9f7-177f-42e4-ad94-4b6fa1d8b15d",
   "metadata": {},
   "source": [
    "## 30. Check if a string is a valid email address."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "99c56fc2-9092-4066-b3d3-30eb0f9a8d0c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "please enter email mohitkrsingh8757@gmail.com\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mohitkrsingh8757@gmail.com is valid mail\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def checkValidMail(email):\n",
    "    \n",
    "    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n",
    "    \n",
    "    if re.match(pattern,email):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "    \n",
    "userEmail = input(\"please enter email\")\n",
    "if checkValidMail(userEmail):\n",
    "    print(userEmail,\"is valid mail\")\n",
    "else:\n",
    "    print(userEmail,\"Not valid mail\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "311114b3-7bc0-40b0-ae05-b7b49d312bdc",
   "metadata": {},
   "source": [
    "## 31. Extract the username from an email address string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "dc18e65f-2317-49df-ac88-ddc04bdabbc0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mohitkr\n"
     ]
    }
   ],
   "source": [
    "email_str = \"mohitkr@gmail.com\"\n",
    "\n",
    "emailUser = email_str.split('@')\n",
    "\n",
    "print(emailUser[0])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50126355-4431-4f70-a7cb-3fa47c94e1c6",
   "metadata": {},
   "source": [
    "## 32. Extract the domain name from an email address string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ca0b4398-eaf9-4189-9bd7-c6f72e215dfa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "gmail.com\n"
     ]
    }
   ],
   "source": [
    "email_str = \"mohitkr@gmail.com\"\n",
    "\n",
    "emailUser = email_str.split('@')\n",
    "\n",
    "print(emailUser[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d57fadfe-401e-4dd1-8941-68b19da3e7b1",
   "metadata": {},
   "source": [
    "## Replace multiple spaces in a string with a single space."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9f5c0cbf-1831-4719-91e0-227668df45de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mohiy kr sin\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "strSp = \"mohiy      kr  sin\"\n",
    "text = strSp.split()\n",
    "\n",
    "#Cleaned_text = ' '.join(text)\n",
    "Cleaned_text =re.sub(r'\\s+', ' ', strSp)\n",
    "print(Cleaned_text)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ada375bc-46cb-43bd-8fce-83a467945f88",
   "metadata": {},
   "source": [
    "## 34. Check if a string is a valid URL."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "60089852-b693-4b74-85ab-6ad68b2a18b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Valid url\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "url_pattern = r\"^(http|https)://[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,}$\"\n",
    "string_url = \"https://www.google.com\"\n",
    "\n",
    "if re.match(url_pattern,string_url):\n",
    "    print(\"Valid url\")\n",
    "else:\n",
    "    print(\"invalid url\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a4b48c8-a286-4f54-aa6c-43156a20fee5",
   "metadata": {},
   "source": [
    "## 35. Extract the protocol (http or https) from a URL string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a4f8b575-5a3f-4916-9a1e-0f3360d94f2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "https\n"
     ]
    }
   ],
   "source": [
    "string_url = \"https://www.google.com\"\n",
    "\n",
    "protocol = string_url.split(':')\n",
    "print(protocol[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37e48fbd-7551-452c-a2d3-2194da7a26f1",
   "metadata": {},
   "source": [
    "## 36. Find the frequency of each character in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "23825bd4-96e8-40cd-86f6-240bcefd7287",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'h' :1\n",
      "'e' :1\n",
      "'l' :3\n",
      "'o' :2\n",
      "'w' :1\n",
      "'r' :1\n",
      "'d' :1\n"
     ]
    }
   ],
   "source": [
    "input_string = \"Hello World!\"\n",
    "\n",
    "char_frequency ={}\n",
    "\n",
    "for char in input_string:\n",
    "    \n",
    "    if char.isalnum():\n",
    "        char = char.lower()\n",
    "        \n",
    "        if char in char_frequency:\n",
    "            char_frequency[char] += 1\n",
    "        else:\n",
    "            char_frequency[char] = 1\n",
    "        \n",
    "for char,count in char_frequency.items():\n",
    "    print(f\"'{char}' :{count}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60a76528-de82-437c-967a-481c42aa1259",
   "metadata": {},
   "source": [
    "## 37. Remove all punctuation from a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2b4bc1b4-5fd3-4538-8cd4-467aeaef6917",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello World This is an example string with punctuation\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "input_string = \"Hello, World! This is an example string with punctuation\"\n",
    "\n",
    "cleaned_string = re.sub(r'[^\\w\\s]', '', input_string)\n",
    "\n",
    "print(cleaned_string)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcc44377-c42b-4f35-8684-b8ca2321db6e",
   "metadata": {},
   "source": [
    "## 38. Check if a string contains only digits.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2b6b7080-2190-43c6-bea4-0cd95869a24c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "str1 =\"123456\"\n",
    "str2 =\"abc123456\"\n",
    "\n",
    "def containsDigitOnly(input_string):\n",
    "    return bool(re.match(r'^\\d+$',input_string))\n",
    "\n",
    "print(containsDigitOnly(str1))\n",
    "print(containsDigitOnly(str2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0d36e62-cdb0-492e-89fd-fb8b17c7a386",
   "metadata": {},
   "source": [
    "## 39. Check if a string contains only alphabets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fbb1a442-f63b-4651-8653-173fb6854467",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "str1 =\"123456\"\n",
    "str2 =\"abc\"\n",
    "\n",
    "def containsDigitOnly(input_string):\n",
    "    return bool(re.match(r'^[A-Za-z]+$',input_string))\n",
    "\n",
    "print(containsDigitOnly(str1))\n",
    "print(containsDigitOnly(str2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53237b08-4ea5-4e24-b8b5-b04255dfdea9",
   "metadata": {},
   "source": [
    "## 40. Convert a string to a list of characters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9dea7c2f-266b-4fa3-85d5-5bb171cbecdc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['m', 'o', 'h', 'i', 't', 'S', 'I', 'n', 'g', 'h', ' ', 'h', 'i']\n"
     ]
    }
   ],
   "source": [
    "str1 = \"mohitSIngh hi\"\n",
    "\n",
    "char_list =[]\n",
    "\n",
    "for char in str1:\n",
    "    char_list.append(char)\n",
    "    \n",
    "print(char_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "27f97948-e1ef-4ef1-af1c-8a5b59765902",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['mohitSIngh']"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listStr"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc1c7ef5-d00c-4b6a-8f70-a30b0708cab3",
   "metadata": {},
   "source": [
    "## 44. Find the most frequent word in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8ad6c6fd-f611-41df-ba4e-a6982d309a3f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The most frequent word in a string is: t\n"
     ]
    }
   ],
   "source": [
    "inputString = \"mohittt ttttttttt\"\n",
    "\n",
    "char_frequency = {}\n",
    "\n",
    "for char in inputString:\n",
    "    if char.isalnum():\n",
    "        char =char.lower()\n",
    "        if char in char_frequency:\n",
    "            char_frequency[char] += 1\n",
    "            \n",
    "        else:\n",
    "            char_frequency[char] = 1\n",
    "\n",
    "max_key = max(char_frequency, key=str)\n",
    "\n",
    "print(f\"The most frequent word in a string is: {max_key}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "643a86e3-0f4a-49e2-b4ec-8571aa4baa69",
   "metadata": {},
   "source": [
    "## 45. Find all unique words in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "080253f1-caa1-485d-b786-527ba82ea454",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "unique char m :1\n",
      "unique char o :1\n",
      "unique char h :1\n",
      "unique char i :1\n"
     ]
    }
   ],
   "source": [
    "inputString = \"mohittt ttttttttt\"\n",
    "\n",
    "char_frequency = {}\n",
    "\n",
    "for char in inputString:\n",
    "    if char.isalnum():\n",
    "        char =char.lower()\n",
    "        if char in char_frequency:\n",
    "            char_frequency[char] += 1\n",
    "            \n",
    "        else:\n",
    "            char_frequency[char] = 1\n",
    "\n",
    "for char,frequency in char_frequency.items():\n",
    "    if frequency ==1:\n",
    "        print(f\"unique char {char} :{frequency}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c08a1c3-95ff-45da-8fea-220b87ac820d",
   "metadata": {},
   "source": [
    "## 47. Check if a string contains any special characters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "6357c9a1-cfab-49d2-8ae4-5cedf52377e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def check_special_char(input_string):\n",
    "    \n",
    "    pattern = r'[^\\w\\d]+'\n",
    "    return bool(re.search(pattern,input_string))\n",
    "\n",
    "string1 = \"Hello123\"\n",
    "string2 = \"This has a special character: @\"\n",
    "\n",
    "print(check_special_char(string1))\n",
    "print(check_special_char(string2)) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76cb6fae-1e70-4b7d-8a6f-db977ea9fc99",
   "metadata": {},
   "source": [
    "## 48. Remove the nth word from a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "6cc4ec16-5fc2-41f2-a98a-2f76a4160182",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "pls enter nth position to remove from string 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mohi Singh\n"
     ]
    }
   ],
   "source": [
    "inputString =\"Mohit Singh\"\n",
    "str_list = []\n",
    "\n",
    "for char in inputString:\n",
    "    str_list.append(char)\n",
    "    \n",
    "pos = int(input(\"pls enter nth position to remove from string\"))\n",
    "\n",
    "#newStrList = str_list.pop(pos)\n",
    "\n",
    "del str_list[pos]\n",
    "\n",
    "returnString =\"\".join(str_list)\n",
    "    \n",
    "print(returnString)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd8f330e-5a35-4dfb-97bb-0eafda43b327",
   "metadata": {},
   "source": [
    "## 49. Insert a word at the nth position in a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e6481ae-93c4-4eb0-af5f-13f986c08cdc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def insert_word_at_nth_position(original_string, word_to_insert, n):\n",
    "    if n < 0:\n",
    "        n = 0\n",
    "    if n > len(original_string):\n",
    "        n = len(original_string)\n",
    "    \n",
    "    return original_string[:n] + word_to_insert + original_string[n:]\n",
    "\n",
    "original_string = \"This is a sample string.\"\n",
    "word_to_insert = \"new\"\n",
    "position = 5\n",
    "\n",
    "result_string = insert_word_at_nth_position(original_string, word_to_insert, position)\n",
    "print(result_string)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3af8a1d6-b518-4aea-ab13-2a7be643a5b3",
   "metadata": {},
   "source": [
    "# list based pratice problem"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6a0599f-c645-402d-9783-1776236660b4",
   "metadata": {},
   "source": [
    "## 1. Create a list with integers from 1 to 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "65620517-ffd1-499a-8bd9-0eb3cb4962ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
     ]
    }
   ],
   "source": [
    "ls = []\n",
    "for num in range (1,11):\n",
    "    ls.append(num)\n",
    "    \n",
    "print(ls)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39ba1bd4-3b55-43f8-97d7-7e02dc2af8f0",
   "metadata": {},
   "source": [
    "## 2. Find the length of a list without using the `len()` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "129b7629-1a51-46e5-9e66-6569d2592599",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lenght of list is  10\n"
     ]
    }
   ],
   "source": [
    "ls = [1, 2, 3, 4, 5, 6, 7, 8, 9, 121]\n",
    "\n",
    "count=0\n",
    "for i in ls:\n",
    "    count+=1\n",
    "   \n",
    "    \n",
    "print(\"lenght of list is \", count)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa23df0d-9c84-4aaf-b4fb-c56e2acc7d57",
   "metadata": {},
   "source": [
    "## 3. Append an element to the end of a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d3d8aa69-670c-49ac-a290-ba5ff6ab4fdb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5, 6, 7, 8, 9, 121, 122]\n"
     ]
    }
   ],
   "source": [
    "ls = [1, 2, 3, 4, 5, 6, 7, 8, 9, 121]\n",
    "ls.append(122)\n",
    "print(ls)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c3c8ece-f085-437e-ada1-b876acbea277",
   "metadata": {},
   "source": [
    "## 4. Insert an element at a specific index in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c17c6094-1ae7-4b31-a994-c8472ba74f43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 45, 3, 4, 5, 6, 7, 8, 9, 121]\n"
     ]
    }
   ],
   "source": [
    "ls = [1, 2, 3, 4, 5, 6, 7, 8, 9, 121]\n",
    "pos = 3\n",
    "\n",
    "ls.insert(pos-1,45)\n",
    "\n",
    "print(ls)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ea65008-a1b0-43eb-b88d-51acb9f2fd91",
   "metadata": {},
   "source": [
    "## 5. Remove an element from a list by its value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a7af68fc-ca95-40e5-ad3a-b5bffcb20835",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 4, 5, 6, 7, 8, 9]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ls = [1, 2, 3, 4, 5, 6, 7, 8, 9, 121]\n",
    "ls.remove(121)\n",
    "ls"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afcafd97-dc97-47dc-bef8-673088e75e83",
   "metadata": {},
   "source": [
    "## 6. Remove an element from a list by its index."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ebae470a-3a4b-4d66-8eec-6076b1d87f86",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 4, 6, 7, 8, 9, 121]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ls = [1, 2, 3, 4, 5, 6, 7, 8, 9, 121]\n",
    "index=4\n",
    "ls.pop(index)\n",
    "ls"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b22f634-3c91-4a34-8a4e-f0867fbcd81f",
   "metadata": {},
   "source": [
    "## 7. Check if an element exists in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "a9277cf1-0962-4cdf-8238-f9e04dd26ec4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "element exists\n"
     ]
    }
   ],
   "source": [
    "ls = [1, 2, 3, 4, 5, 6, 7, 8, 9, 121]\n",
    "element_to_check = 6\n",
    "element_exists = False\n",
    "\n",
    "for num in ls:\n",
    "    if num == element_to_check:\n",
    "        element_exists = True\n",
    "        break\n",
    "        \n",
    "if element_exists:\n",
    "    print(\"element exists\")\n",
    "else:\n",
    "    print(\"doesn't exists\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16a83188-de62-4c83-a9cf-87a5cb0bc716",
   "metadata": {},
   "source": [
    "## 8. Find the index of the first occurrence of an element in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "ba83b020-e148-4654-9c41-c70f46ddb934",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "index of 1st occurance  2\n"
     ]
    }
   ],
   "source": [
    "ls = [1, 2, 3, 4, 2, 7, 18,8, 9, 121]\n",
    "num = 2\n",
    "index =0\n",
    "\n",
    "for item in ls:\n",
    "    index += 1\n",
    "    if item==num:\n",
    "        break\n",
    "print(\"index of 1st occurance \",index)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91977591-2615-4442-883b-30c774616dc1",
   "metadata": {},
   "source": [
    "## 9. Count the occurrences of an element in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "f9b7d92f-9d33-4154-9884-f550d1c8a4a6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "occurance count  5\n"
     ]
    }
   ],
   "source": [
    "ls = [1, 2, 3, 4, 2, 7,2,2,2 ,18,8, 9, 121]\n",
    "element_to_count_occurrences = 2\n",
    "count = 0\n",
    "for item in ls:\n",
    "    if item == element_to_count_occurrences:\n",
    "        count +=1\n",
    "        \n",
    "print(\"occurance count \", count )\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af5b9399-d48e-429f-b47b-37a35166b229",
   "metadata": {},
   "source": [
    "## 10. Reverse the order of elements in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "0d8f7fc7-529f-4eba-95e3-99074e70c128",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[121, 9, 8, 18, 2, 2, 2, 7, 2, 4, 3, 2, 1]\n",
      "[121, 9, 8, 18, 2, 2, 2, 7, 2, 4, 3, 2, 1]\n"
     ]
    }
   ],
   "source": [
    "ls = [1, 2, 3, 4, 2, 7,2,2,2 ,18,8, 9, 121]\n",
    "reversed_list1 = ls[::-1]\n",
    "ls.reverse()\n",
    "print(reversed_list1)\n",
    "print(ls)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9093cb69-e44b-4f2a-8a42-0552b9980dfd",
   "metadata": {},
   "source": [
    "## 11. Sort a list in ascending order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "03108b6c-a426-4a0d-a88b-b040d6a5ecf6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 3, 7, 8, 9, 11, 14, 18, 27, 121, 202, 221, 222]\n"
     ]
    }
   ],
   "source": [
    "ls = [11, 222, 3, 14, 2, 7,27,221,202 ,18,8, 9, 121]\n",
    "\n",
    "sorted_list = sorted(ls)\n",
    "print(sorted_list)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e230b20-310a-46d8-98a5-983aa074ca09",
   "metadata": {},
   "source": [
    "## 12. Sort a list in descending order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "600a7dd2-0b27-452e-8795-33b2315d10b6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[222, 221, 202, 121, 27, 18, 14, 11, 9, 8, 7, 3, 2]\n"
     ]
    }
   ],
   "source": [
    "ls = [11, 222, 3, 14, 2, 7,27,221,202 ,18,8, 9, 121]\n",
    "sorted_list = sorted(ls,reverse=True)\n",
    "print(sorted_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b6fb351-7749-45ca-a60a-2db27c261425",
   "metadata": {},
   "source": [
    "## 13. Create a list of even numbers from 1 to 20."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "34ade2c7-ea43-4c7d-a89d-434ebe7329ed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 4, 6, 8]\n"
     ]
    }
   ],
   "source": [
    "ls = [1,2,3,4,5,6,7,8,9]\n",
    "even_lst = []\n",
    "odd_lst = []\n",
    "\n",
    "for item in ls:\n",
    "    if item%2 ==0:\n",
    "        even_lst.append(item)\n",
    "    else:\n",
    "        odd_lst.append(item)\n",
    "        \n",
    "print(even_lst)\n",
    "            \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39eb5555-59a6-402d-82b3-ffde1c8ca223",
   "metadata": {},
   "source": [
    "## 14. Create a list of odd numbers from 1 to 20."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "f5c59d76-1ca2-4930-b2b4-98f27e868f5c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 3, 5, 7, 9]"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "odd_lst"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d09d0469-c70a-44d7-a1c8-5954908e84af",
   "metadata": {},
   "source": [
    "## 15. Find the sum of all elements in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "ce2c880e-55c9-4761-bc42-81959370111a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "181\n"
     ]
    }
   ],
   "source": [
    "ls = [1, 2, 3, 4, 2, 7,2,2,2 ,18,8, 9, 121]\n",
    "sum =0 \n",
    "for item in ls:\n",
    "    sum+=item\n",
    "print(sum)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "239aea63-7f13-408b-9c24-aa556aa29291",
   "metadata": {},
   "source": [
    "##  16. Find the maximum value in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "1b6d369a-d851-4b3c-ae01-55c01017216e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "121\n"
     ]
    }
   ],
   "source": [
    "ls = [1, 2, 3, 4, 2, 7,2,2,2 ,18,8, 9, 121]\n",
    "max_val=max(ls)\n",
    "print(max_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78ec3203-9ce8-418e-8c01-b15405ce66dc",
   "metadata": {},
   "source": [
    "## 17. Find the minimum value in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "79343931-188d-4b70-b444-af2ade845ba4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "ls = [1, 2, 3, 4, 2, 7,2,2,2 ,18,8, 9, 121]\n",
    "min_val=min(ls)\n",
    "print(min_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e5f786d-4cea-4d4b-b57b-fcee5c885a13",
   "metadata": {},
   "source": [
    "## 18. Create a list of squares of numbers from 1 to 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "22732b2a-80da-4810-bfbd-13aff9e82268",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "square_lst = []\n",
    "for i in range(1,11):\n",
    "    square =i*i\n",
    "   \n",
    "    square_lst.append(square)\n",
    "    \n",
    "square_lst"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc703477-4fa2-44ec-a55b-8a9832325b54",
   "metadata": {},
   "source": [
    "## 19. Create a list of random numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "e8d5979d-a7fc-40a1-a648-e3cdfb32967c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[62, 35, 14, 65, 20]"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "random_list = [random.randint(1,100) for _ in range(5)]\n",
    "\n",
    "random_list"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7e2f24c-c1de-4f03-a314-66dd31ea5794",
   "metadata": {},
   "source": [
    "## 20. Remove duplicates from a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "1a40fb91-6e2f-479d-bd10-9f8e573a4b57",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 7, 8, 9, 18, 121]\n"
     ]
    }
   ],
   "source": [
    "ls = [1, 2, 3, 4, 2, 7,2,2,2 ,18,8, 9, 121]\n",
    "my_set = set(ls)\n",
    "\n",
    "ls2 = list(my_set)\n",
    "\n",
    "print(ls2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11793e6c-cd78-4ecd-99e9-3f2eb7ab2f15",
   "metadata": {},
   "source": [
    "## 21. Find the common elements between two lists."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "8767557f-e6e7-4893-8109-fc739d544982",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[4]"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ls1 = [1,2,3,4]\n",
    "ls2 = [4,5,6,7]\n",
    "\n",
    "set1 = set(ls1) \n",
    "set2 = set(ls2) \n",
    "\n",
    "\n",
    "ls3 = list(set1.intersection(set2))\n",
    "\n",
    "ls3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "832d337b-c06c-4c6c-a9b8-67a44786bc1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 22. Find the difference between two lists."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "9e830b97-c1a7-4dbd-a4d6-125a6d22a7d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3]"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ls1 = [1,2,3,4]\n",
    "ls2 = [4,5,6,7]\n",
    "\n",
    "set1 = set(ls1) \n",
    "set2 = set(ls2) \n",
    "\n",
    "\n",
    "ls3 = list(set1.difference(set2))\n",
    "\n",
    "ls3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16d136ba-e870-4b25-9424-8d6d2d546c68",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 23. Merge two lists."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "ed898fc6-0d37-47d2-89ff-94976f7bb739",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 4, 4, 5, 6, 7]"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ls1 = [1,2,3,4]\n",
    "ls2 = [4,5,6,7]\n",
    "\n",
    "ls3 = ls1 + ls2\n",
    "\n",
    "ls3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "caf59214-ade2-469b-a7c3-aa4086252034",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 24. Multiply all elements in a list by 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "4e30ba80-b6db-45b3-b87e-6345ba3de966",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[8, 10, 12, 14]"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ls = [4,5,6,7]\n",
    "\n",
    "new_list = []\n",
    "\n",
    "for i in ls:\n",
    "    num = i*2\n",
    "    new_list.append(num)\n",
    "    \n",
    "new_list\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d17a431-270b-453c-a197-f401bc303b64",
   "metadata": {},
   "source": [
    "## 25. Filter out all even numbers from a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "b22f7ecd-c1b7-4454-a14f-5b8033a1ce0f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 4]\n"
     ]
    }
   ],
   "source": [
    "list1 = [1, 2, 3, 4, 5]\n",
    "list2 = [3, 4, 5, 6, 7]\n",
    "\n",
    "even_list = []\n",
    "\n",
    "for num in list1:\n",
    "    if num %2 == 0:\n",
    "        even_list.append(num)\n",
    "        \n",
    "print(even_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ed56ffd-a0f8-4c21-97c4-1b7eb3f4f5e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 26. Convert a list of strings to a list of integers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "b632e470-542a-4a84-ae94-13c520551912",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4]\n"
     ]
    }
   ],
   "source": [
    "lst = [\"1\",\"2\",\"3\",\"4\"]\n",
    "\n",
    "integer_list = []\n",
    "\n",
    "for num in lst:\n",
    "    integer_list.append(int(num))\n",
    "    \n",
    "print(integer_list)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "852efaf4-fa1d-441a-9c5f-e7d0bb8df6c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 27. Convert a list of integers to a list of strings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "dd0c4419-1938-42c4-894a-12b1e157eff1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['1', '2', '3', '4']\n"
     ]
    }
   ],
   "source": [
    "lst = [1, 2, 3, 4]\n",
    "\n",
    "integer_list = []\n",
    "\n",
    "for num in lst:\n",
    "    integer_list.append(str(num))\n",
    "    \n",
    "print(integer_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "78d25716-b2b7-438b-b158-6a05d50f5dd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 28. Flatten a nested list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "d962b3cb-22c2-44db-9e4e-f2bb6dc31226",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5, 6]\n"
     ]
    }
   ],
   "source": [
    "def flatten_list(nested_list):\n",
    "    flattened = []\n",
    "    for item in nested_list:\n",
    "        if isinstance(item, list):\n",
    "            flattened.extend(flatten_list(item))\n",
    "        else:\n",
    "            flattened.append(item)\n",
    "    return flattened\n",
    "\n",
    "nested_list = [1, [2, [3, 4], 5], 6]\n",
    "flat_list = flatten_list(nested_list)\n",
    "print(flat_list)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e918d6c-59f4-41e2-9f66-482f7c400e3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 29. Create a list of the first 10 Fibonacci numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "08ba7c75-4770-44ce-9237-88c7a100b882",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fibonacci_lst = [0,1]\n",
    "\n",
    "for i in range(2,10):\n",
    "    next_fib = fibonacci_lst[i-1]+fibonacci_lst[i-2]\n",
    "   \n",
    "    fibonacci_lst.append(next_fib)\n",
    "    \n",
    "print(fibonacci_lst)\n",
    "\n",
    "fibonacci_lst[2]\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5a16d24a-63a6-4dce-8df3-73320f6b39c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 30. Check if a list is sorted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "a01c1000-84ee-4a64-b206-2c4e6671653a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The list is sorted in descending order.\n"
     ]
    }
   ],
   "source": [
    "def is_sorted_descending(lst):\n",
    "    for i in range(1, len(lst)):\n",
    "        if lst[i] > lst[i - 1]:\n",
    "            return False\n",
    "    return True\n",
    "\n",
    "my_list = [5, 4, 3, 2, 1]\n",
    "\n",
    "if is_sorted_descending(my_list):\n",
    "    print(\"The list is sorted in descending order.\")\n",
    "else:\n",
    "    print(\"The list is not sorted in descending order.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b055c02b-2349-4c3a-a254-bf6fa4cfeb97",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 31. Rotate a list to the left by `n` positions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f556e332-a5d6-459c-aa69-9b178aea258d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3, 4, 5, 1, 2]\n"
     ]
    }
   ],
   "source": [
    "def rotate_left(lst,n):\n",
    "   ## n= n% len(lst)\n",
    "    \n",
    "    rotatedList = lst[n:] + lst[:n]\n",
    "    \n",
    "    return rotatedList\n",
    "\n",
    "o_lst = [1,2,3,4,5]\n",
    "n = 2\n",
    "\n",
    "leftRotatedList = rotate_left(o_lst,n)\n",
    "print(leftRotatedList)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a89277dc-4dbc-4e0a-aa09-f81534fbd13d",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 32. Rotate a list to the right by `n` positions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b33aa25b-5547-4f00-bb4c-9fb56f61bd83",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5]\n"
     ]
    }
   ],
   "source": [
    "def rotate_left(lst,n):\n",
    "   ## n= n% len(lst)\n",
    "    \n",
    "    ## rotatedList = lst[n:] + lst[:n]\n",
    "    \n",
    "    rotatedList = lst[:n] + lst[n:]\n",
    "    \n",
    "    return rotatedList\n",
    "\n",
    "o_lst = [1,2,3,4,5]\n",
    "n = 2\n",
    "\n",
    "leftRotatedList = rotate_left(o_lst,n)\n",
    "print(leftRotatedList)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39d02ecf-c486-43c6-996e-065f79735e6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 33. Create a list of prime numbers up to 50."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "2cee9102-880b-4572-abe5-faa1011d6cf1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n"
     ]
    }
   ],
   "source": [
    "prime_list = []\n",
    "num = 51\n",
    "\n",
    "for num in range(1,50):\n",
    "    \n",
    "    \n",
    "        for i in range(2,num):\n",
    "            if num%i ==0:\n",
    "                break\n",
    "        else:\n",
    "            prime_list.append(num)\n",
    "            \n",
    "print(prime_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41341b16-5808-402c-b45a-fa7ec65994ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 34. Split a list into chunks of size `n`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "43c8be3b-2879-48cf-9dfd-2719b8c6711d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4]\n",
      "[5, 6, 7, 8]\n",
      "[9]\n"
     ]
    }
   ],
   "source": [
    "my_list = [1, 2, 3, 4, 5,\n",
    "           6, 7, 8, 9]\n",
    "start = 0\n",
    "end = len(my_list)\n",
    "size = 4\n",
    "for i in range(start, end, size):\n",
    "    x = i\n",
    "    print(my_list[x:x+step])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0c40134-2371-4403-8bbc-0b95c8eb0e9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 35. Find the second largest number in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "616248d7-89ad-4dfa-abe9-3cf509e1465c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[67, 45, 23, 56, 57]\n",
      "56\n"
     ]
    }
   ],
   "source": [
    "list1 = [56,45,67,23,56,57]\n",
    "list2 = list(set(list1))\n",
    "print(list2)\n",
    "##list2.sort()\n",
    "print(list2[-2])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "690e7f4d-be49-43bc-99a2-4a180886aa14",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 36. Replace every element in a list with its square."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "1eed0d8f-2213-4cc9-b4a8-47702b3767a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4, 9, 16, 25, 36]\n"
     ]
    }
   ],
   "source": [
    "lst1 = [2,3,4,5,6]\n",
    "lst2 = []\n",
    "\n",
    "for num in lst1:\n",
    "    sqr = num*num\n",
    "    lst2.append(sqr)\n",
    "    \n",
    "print(lst2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d7a0156-e695-45d5-ba15-38c070c987b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 37. Convert a list to a dictionary where list elements become keys and their indices become values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "25e3b130-301c-41c6-8f88-637f5d89e561",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'mohit': 0, 'rohit': 1, 'kishu': 2, 'kumar': 3, 'singh': 4}\n"
     ]
    }
   ],
   "source": [
    "name = ['mohit','rohit','kishu','kumar','singh']\n",
    "my_dict = {}\n",
    "\n",
    "for index,element in enumerate(name):\n",
    "    my_dict[element]=index\n",
    "print(my_dict)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "750c6466-8da2-4aec-8d35-2893643aa783",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 38. Shuffle the elements of a list randomly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "9b77eb83-dc8a-4aa2-8cef-cd19a0e93cc0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5, 2, 3, 4, 1]\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "my_list = [1, 2, 3, 4, 5]\n",
    "random.shuffle(my_list)\n",
    "print(my_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "023ed059-1a91-414f-b18b-66f35d738966",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 39. Create a list of the first 10 factorial numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70349aa8-3c43-4333-8085-0194cf6985ce",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "356cee5e-e967-4daa-8063-68cb849e95f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 40. Check if two lists have at least one element in common."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "edae8026-d45d-41ad-923f-fc63ee5a3f8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The lists have at least one common element.\n"
     ]
    }
   ],
   "source": [
    "def have_common_element(list1, list2):\n",
    "  \n",
    "    set1 = set(list1)\n",
    "    set2 = set(list2)\n",
    "\n",
    "    if set1.intersection(set2):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "list1 = [1, 2, 3, 4, 5]\n",
    "list2 = [4, 5, 6, 7, 8]\n",
    "\n",
    "if have_common_element(list1, list2):\n",
    "    print(\"The lists have at least one common element.\")\n",
    "else:\n",
    "    print(\"The lists do not have any common elements.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d74f145-f59e-4e7f-b88e-113416ad0b29",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 41. Remove all elements from a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "a0d95f3e-0974-4f72-88d9-3bfedd84403c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    }
   ],
   "source": [
    "my_list = [1, 2, 3, 4, 5]\n",
    "my_list.clear()\n",
    "print(my_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb028a56-5b88-4a9a-87c8-a3ccea743fee",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 42. Replace negative numbers in a list with 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "aa7230b8-4fd1-4ccb-a843-1d27276d3198",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 15, 0]\n"
     ]
    }
   ],
   "source": [
    "lst1 = [-21,1,15,-67]\n",
    "\n",
    "lst2 = [num if num >= 0 else 0 for num in lst1]\n",
    "print(lst2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "968f1201-6f09-4f62-9172-e6cc416f0255",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 43. Convert a string into a list of words."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5ed67fef-d653-44af-96b1-bc89baa8e41f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['m', 'o', 'h', 'i', 't']\n"
     ]
    }
   ],
   "source": [
    "str1 = \"mohit\"\n",
    "lst1 = []\n",
    "\n",
    "for w in str1:\n",
    "    lst1.append(w)\n",
    "print(lst1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4af379b8-e96e-447b-bebe-4cd98778f15e",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 44. Convert a list of words into a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6a58ebaa-b238-442f-9ed8-3e1cbf1be731",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mohit\n"
     ]
    }
   ],
   "source": [
    "lst1 = ['m', 'o', 'h', 'i', 't']\n",
    "str1 =\"\".join(lst1)\n",
    "\n",
    "\n",
    "print(str1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a80baac-e034-48d3-a9f3-576d97ad79eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 45. Create a list of the first `n` powers of 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4e66a69-423f-4488-82c2-961b2e487e27",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d57631ec-6b44-4aa5-a5e3-d73fc3701f64",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 46. Find the longest string in a list of strings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c49b28e5-fe21-4537-a7b0-8e4d9a4d439c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "longest string  elderberry\n"
     ]
    }
   ],
   "source": [
    "string_list = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n",
    "longest_string = ''\n",
    "\n",
    "for fruits in string_list:\n",
    "    if len(fruits)>len(longest_string):\n",
    "        longest_string=fruits\n",
    "        \n",
    "print('longest string ',longest_string)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b02206d1-669e-47f0-bdc9-edb06b70dab0",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 47. Find the shortest string in a list of strings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "21add078-5695-4064-85d2-84555f972540",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "longest string  date\n"
     ]
    }
   ],
   "source": [
    "string_list = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n",
    "shortest_string  = string_list[0]\n",
    "\n",
    "for fruits in string_list:\n",
    "    if len(fruits)<len(shortest_string):\n",
    "        shortest_string =fruits\n",
    "        \n",
    "print('longest string ',shortest_string )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55994c42-3838-4cb2-90f7-0394a56c533a",
   "metadata": {},
   "source": [
    "# Tuple Based Practice Problem :"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c30c588c-f7f4-445c-a409-95171912feda",
   "metadata": {},
   "source": [
    "## 1. Create a tuple with integers from 1 to 5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "3524d2be-5e34-479c-973a-b575a497e3f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 3, 4, 5)\n",
      "(1, 2, 3, 4, 5)\n"
     ]
    }
   ],
   "source": [
    "tup = ()\n",
    "\n",
    "for i in range(1,6):\n",
    "    tup += (i,)\n",
    "print(tup)\n",
    "\n",
    "tup2 = tuple(range(1,6))\n",
    "print(tup2)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "30552d48-9af9-4721-a3a0-37f323e40825",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 2. Access the third element of a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "97c274a4-1f37-4927-9b5b-b0dbaa2e109c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tup[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc4dbb41-ef47-4e80-9ecb-9152e2a63066",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 3. Find the length of a tuple without using the `len()` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "3bf538b0-93bb-469f-b0b5-e05b5ca2de3c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    }
   ],
   "source": [
    "tup1 = (1, 2, 3, 4, 5)\n",
    "len = 0\n",
    "\n",
    "for i in tup1:\n",
    "    len +=1\n",
    "    \n",
    "print(len)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7945e388-6a9f-42f3-822c-de1c30aa1049",
   "metadata": {},
   "outputs": [],
   "source": [
    "##  4. Count the occurrences of an element in a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "32a444fa-7185-4c8e-a8f8-1743fdf24ac5",
   "metadata": {},
   "outputs": [],
   "source": [
    "tup1 = (1, 2, 3, 4, 5)\n",
    "\n",
    "for i in tup1:\n",
    "    for "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b27b35dd-dc1b-499d-a2b3-02867c433889",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 5. Find the index of the first occurrence of an element in a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "3fe0cfec-2d70-4ea4-bdee-583e714fc485",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The element 2 appears 4 times\n"
     ]
    }
   ],
   "source": [
    "my_tuple = (1, 2, 2, 3, 4, 2, 5, 2)\n",
    "\n",
    "count = my_tuple.count(2)\n",
    "\n",
    "print(\"The element 2 appears\", count, \"times\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bb614897-9774-4798-8704-7ef6882bfa2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 6. Check if an element exists in a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "f59cbe05-e5d1-442c-95f4-710ccdc80af4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "exists\n"
     ]
    }
   ],
   "source": [
    "my_tuple = (1, 2, 2, 3, 4, 2, 5, 2)\n",
    "\n",
    "## checking 5\n",
    "\n",
    "if 5 in my_tuple:\n",
    "    print(\"exists\")\n",
    "else:\n",
    "    print(\"doesn't exixts\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6580eff5-c4b0-4ab5-9a90-9c6157b28801",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 7. Convert a tuple to a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "f1d560cf-2761-4684-a506-99355fcd41e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 2, 3, 4, 2, 5, 2]\n"
     ]
    }
   ],
   "source": [
    "lst = list(my_tuple)\n",
    "print(lst)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a1f507d1-1a79-4834-a1b5-ad577f283a7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 8. Convert a list to a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "30e28569-2636-4617-8d61-9219d959d861",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 2, 3, 4, 2, 5, 2)\n"
     ]
    }
   ],
   "source": [
    "tup = tuple(lst)\n",
    "print(tup)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "29400bdf-2116-41b1-9a08-d8cdf11c7542",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 9. Unpack the elements of a tuple into variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0cacb3df-0219-48a4-9161-49dc0aef6f4c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b240e94-dc2d-4fc0-9a26-3e4aac6a9f74",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 10. Create a tuple of even numbers from 1 to 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "b3a2857e-40b0-4fd7-aa0a-e2ab14469423",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, 4, 6, 8, 10)\n"
     ]
    }
   ],
   "source": [
    "my_tup=()\n",
    "for i in range(1,11):\n",
    "    if i%2==0:\n",
    "        my_tup +=(i,)\n",
    "print(my_tup)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "97bd9623-17b2-4ec6-94a9-f36e7c8cffd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 11. Create a tuple of odd numbers from 1 to 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "0dc7f455-5ba9-47c0-a580-f2f5e1be8d75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 3, 5, 7, 9)\n"
     ]
    }
   ],
   "source": [
    "my_tup=()\n",
    "for i in range(1,11):\n",
    "    if i%2==0:\n",
    "        pass\n",
    "    else:\n",
    "        my_tup +=(i,)\n",
    "print(my_tup)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "313c31d2-d482-480c-886c-e7d10efdb7c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 12. Concatenate two tuples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "5928e36f-227e-4445-933c-d585931f9140",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 3, 4, 5, 6)\n"
     ]
    }
   ],
   "source": [
    "tuple1 = (1, 2, 3)\n",
    "tuple2 = (4, 5, 6)\n",
    "\n",
    "concatenated_tuple = tuple1 + tuple2\n",
    "\n",
    "print(concatenated_tuple)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "be89b472-3de5-4dee-811f-ababc6f702f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 13. Repeat a tuple three times."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "ca84d7ee-f1cc-4aae-a674-64cb94da0efe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 3, 1, 2, 3, 1, 2, 3)\n"
     ]
    }
   ],
   "source": [
    "repeated_tuple = tuple1*3\n",
    "print(repeated_tuple)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "957efcaa-73b0-47f7-9539-9645669a5ad5",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 14. Check if a tuple is empty."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "edb51fe4-d26d-4d66-9f62-ebf6e5dff803",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The tuple is empty.\n"
     ]
    }
   ],
   "source": [
    "##my_tuple = (1)\n",
    "my_tuple = ()\n",
    "\n",
    "if not my_tuple:\n",
    "    print(\"The tuple is empty.\")\n",
    "else:\n",
    "    print(\"The tuple is not empty.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87f3ce6f-80ec-4ac5-8102-463d9bc8ea6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 15. Create a nested tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "f28b1df2-075d-441b-9104-dea0d76aa0cf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "((1, 2, 3), (4, 5, 6), (7, 8, 9))\n"
     ]
    }
   ],
   "source": [
    "nested_tuple = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n",
    "\n",
    "print(nested_tuple)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96683c7b-0d43-4f80-8620-278aaafa2dad",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 16. Access the first element of a nested tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "53e202fe-b16d-4445-bf86-67d32eb7051f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "element = nested_tuple[0][0]\n",
    "print(element)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b8e03d61-2ebd-4abd-b7e7-d733153a5fd9",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 17. Create a tuple with a single element."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "c30da847-8ea2-419b-97d2-b0a4cee579cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(42,)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "single_element_tuple = (42,)\n",
    "single_element_tuple"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b6bd1e9d-2ab0-4f52-9685-90079b568ce1",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 18. Compare two tuples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "92910acc-aac6-4b2a-ba9a-cb0aafcfb2a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n",
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "tuple1 = (1, 2, 3)\n",
    "tuple2 = (1, 2, 3)\n",
    "\n",
    "print(tuple1 == tuple2)  \n",
    "\n",
    "tuple3 = (4, 5, 6)\n",
    "\n",
    "print(tuple1 != tuple3)  \n",
    "\n",
    "tuple4 = (1, 2, 4)\n",
    "\n",
    "\n",
    "print(tuple1 < tuple4)   \n",
    "tuple5 = (1, 2, 2)\n",
    "\n",
    "\n",
    "print(tuple1 > tuple5) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef2043a6-183d-4b57-b753-bc9864af545a",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 19. Delete a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "dea47193-b3e4-4f05-bb36-3d4c71df0988",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_tuple = (1, 2, 3, 4, 5)\n",
    "\n",
    "del my_tuple\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "99b448d7-5ebe-4e91-811b-d2dbc1d20884",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 20. Slice a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "866f0ab7-8f5d-40c8-9c9a-87fb2f05b481",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, 3, 4)\n"
     ]
    }
   ],
   "source": [
    "my_tuple = (1, 2, 3, 4, 5)\n",
    "\n",
    "sliced_tuple = my_tuple[1:4]\n",
    "\n",
    "print(sliced_tuple)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b3ad0b3-ee2a-4d06-a7aa-822132d3e5e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 21. Find the maximum value in a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "6a9c8a2f-0f73-48d7-ad5a-1d607d2b4078",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The maximum value  20\n"
     ]
    }
   ],
   "source": [
    "my_tuple = (10, 5, 8, 20, 15)\n",
    "\n",
    "max_value = max(my_tuple)\n",
    "\n",
    "print(\"The maximum value \", max_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39d3a2cb-0758-42e3-a0a8-619e456745cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 22. Find the minimum value in a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "46f5f42c-ce32-4d42-a6e1-1dded326400f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The min value  5\n"
     ]
    }
   ],
   "source": [
    "my_tuple = (10, 5, 8, 20, 15)\n",
    "\n",
    "max_value = min(my_tuple)\n",
    "\n",
    "print(\"The min value \", max_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c66b4260-497c-4f08-924b-2223fa65976b",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 23. Convert a string to a tuple of characters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "186dd9b8-a4fc-4366-9660-a4c18948796e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!')\n"
     ]
    }
   ],
   "source": [
    "my_string = \"Hello, world!\"\n",
    "\n",
    "char_tuple = tuple(my_string)\n",
    "\n",
    "print(char_tuple)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6024f372-2ba6-485c-ac35-31af11b199db",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 24. Convert a tuple of characters to a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "16a1fcd8-b753-4a36-9446-b094396c73b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, world!\n"
     ]
    }
   ],
   "source": [
    "my_string1 = \"\".join(char_tuple)\n",
    "print(my_string1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ca209d91-b0f4-45b1-a2f6-ce01ae7e897c",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 25. Create a tuple from multiple data types."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "203a1f6d-f0ad-44a3-9d0e-284c73807b00",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 'Hello', 3.14, [4, 5, 6], {'name': 'Alice', 'age': 30})\n"
     ]
    }
   ],
   "source": [
    "multiple_data_type = (1, \"Hello\", 3.14, [4, 5, 6], {'name': 'Alice', 'age': 30})\n",
    "\n",
    "print(multiple_data_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a3d9342-1fe0-41b1-b06f-ad206829b682",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 26. Check if two tuples are identical."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "2b7d41e5-bbd5-4915-bccf-78098f1d5339",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tuple are identical\n"
     ]
    }
   ],
   "source": [
    "tuple1 = (1, 2, 3)\n",
    "tuple2 = (1, 2, 3)\n",
    "\n",
    "if tuple1 == tuple2:\n",
    "    print(\"tuple are identical\")\n",
    "    \n",
    "else:\n",
    "    print(\"not identical\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e9fc20e-eea5-4a47-b46d-37aaef28c4b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 27. Sort the elements of a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "bdc3decb-399a-4f01-baff-06b4ba0bfdb0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(12, 23, 34, 45, 56, 67, 87, 97, 98)\n"
     ]
    }
   ],
   "source": [
    "tup = (12,34,56,45,45,23,67,87,67,98,97,87,34)\n",
    "seet = set(tup)\n",
    "sortedTupel = tuple(sorted(seet))\n",
    "print(sortedTupel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "210dffc3-7742-4e46-9943-a80d9a972ea9",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 28. Convert a tuple of integers to a tuple of strings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "95aad895-217f-4ca2-af14-86b6a451062f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('12', '23', '34', '45', '56', '67', '87', '97', '98')\n"
     ]
    }
   ],
   "source": [
    "my_tup= (12, 23, 34, 45, 56, 67, 87, 97, 98)\n",
    "str_tuple = tuple(str(x) for x in my_tup)\n",
    "print(str_tuple)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc63510b-2979-4739-8b81-f0996126fb4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 29. Convert a tuple of strings to a tuple of integers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "645d6844-b64a-4888-9a1c-ebac028ab2cf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(12, 23, 34, 45, 56, 67, 87, 97, 98)\n"
     ]
    }
   ],
   "source": [
    "my_tup= (12, 23, 34, 45, 56, 67, 87, 97, 98)\n",
    "int_tuple = tuple(int(x) for x in my_tup)\n",
    "print(int_tuple)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7dd681ad-c65f-4c19-abc6-0d31b73f1ab9",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 30. Merge two tuples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "969366a1-73c1-4acf-a45e-855f2c5118a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 3, 1, 2, 3)\n"
     ]
    }
   ],
   "source": [
    "tuple1 = (1, 2, 3)\n",
    "tuple2 = (1, 2, 3)\n",
    "\n",
    "new_tuple = tuple1+tuple2\n",
    "\n",
    "print(new_tuple)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "266088e7-d623-48cc-8f51-7b294d9daae0",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 31. Flatten a nested tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "b597befc-87f5-4568-a859-ac333131b2aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 3, 4, 5, 6, 7)\n"
     ]
    }
   ],
   "source": [
    "def flatten_tuple(nested_tuple):\n",
    "    flattened_list = []\n",
    "    for item in nested_tuple:\n",
    "        if isinstance(item, tuple):\n",
    "            flattened_list.extend(flatten_tuple(item))\n",
    "        else:\n",
    "            flattened_list.append(item)\n",
    "    return tuple(flattened_list)\n",
    "\n",
    "nested_tuple = ((1, 2), (3, (4, 5)), 6, (7,))\n",
    "\n",
    "flattened_tuple = flatten_tuple(nested_tuple)\n",
    "\n",
    "print(flattened_tuple)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e54cc102-fe42-4f70-984a-29bc19ecac7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 32. Create a tuple of the first 5 prime numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "b34c4c60-de97-401f-9e35-ad708880a89d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, 3, 5, 7, 11)\n"
     ]
    }
   ],
   "source": [
    "prime_numbers = []\n",
    "count = 0\n",
    "num = 2\n",
    "\n",
    "while count < 5:\n",
    "    is_prime = True\n",
    "    for i in range(2, int(num ** 0.5) + 1):\n",
    "        if num % i == 0:\n",
    "            is_prime = False\n",
    "            break\n",
    "    if is_prime:\n",
    "        prime_numbers.append(num)\n",
    "        count += 1\n",
    "    num += 1\n",
    "\n",
    "prime_tuple = tuple(prime_numbers)\n",
    "\n",
    "print(prime_tuple)\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a3b6879-91c0-4eb6-8e7a-9c5fdeeeaba4",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 33. Check if a tuple is a palindrome."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "93120319-993f-4bf0-8fa2-36e4ca7d8776",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "def is_palindrone(input_tuple):\n",
    "    \n",
    "    return input_tuple == input_tuple[::-1] \n",
    "\n",
    "palindrome_tuple = (1,2,1)\n",
    "non_palindrome_tuple = (1, 2, 3)\n",
    "\n",
    "print(is_palindrone(palindrome_tuple))\n",
    "print(is_palindrone(non_palindrome_tuple))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "347405c6-b560-40c4-8298-79fba1d60eb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 34. Create a tuple of squares of numbers from 1 to 5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "e3f22765-124f-4d6f-9a9f-345037564cb1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 4, 9, 16, 25)\n"
     ]
    }
   ],
   "source": [
    "sqared_tuple = tuple(x**2 for x in range(1,6))\n",
    "print(sqared_tuple)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff39d4a7-ee02-4b1e-9a61-bc1491e43308",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 35. Filter out all even numbers from a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "7859eb87-df25-4191-9855-350265387194",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "4\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "my_tuple = (1, 2, 3, 4, 5, 6, 7)\n",
    "\n",
    "for num in my_tuple:\n",
    "    if num%2==0:\n",
    "        print(num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1d4a61df-0d5b-4761-96f9-76d204f47863",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 36. Multiply all elements in a tuple by 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "f9d8402c-5294-43e2-aa3d-44be6fa92fa7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, 4, 6, 8, 10, 12, 14)\n"
     ]
    }
   ],
   "source": [
    "my_tuple = (1, 2, 3, 4, 5, 6, 7)\n",
    "multiplyed_tuple = tuple(x*2 for x in my_tuple)\n",
    "print(multiplyed_tuple)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "e7b0b36f-f943-46d8-88f3-a9dbe4720b1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 37. Create a tuple of random numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "fbd31271-3b4c-4e7c-82dc-33c8ebeb3a3c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(95, 19, 31, 68, 17)\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "random_tuple = tuple(random.randint(1,100) for x in range(5))\n",
    "print(random_tuple)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "394c8b77-aed7-45a9-ac9b-195892bc271a",
   "metadata": {},
   "source": [
    "## 38 Check if a tuple is sorted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "013e52fe-8131-4743-8463-fe867176649b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "sorted_tuple = (1, 2, 3, 4, 5)\n",
    "unsorted_tuple = (5, 2, 4, 1, 3)\n",
    "\n",
    "def is_sorted_tuple(input_tuple):\n",
    "    return input_tuple == tuple(sorted(input_tuple))\n",
    "\n",
    "print(is_sorted_tuple(sorted_tuple))\n",
    "print(is_sorted_tuple(unsorted_tuple))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aaf234fb-e7db-4477-9207-c9226f129783",
   "metadata": {},
   "source": [
    "## 39. Rotate a tuple to the left by `n` positions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "3d721bea-ff91-4afd-a703-8ce5f590fa3d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3, 4, 5, 1, 2)\n"
     ]
    }
   ],
   "source": [
    "def rotate_tuple_left(input_tuple, n):\n",
    "   \n",
    "    return input_tuple[n:] + input_tuple[:n]\n",
    "\n",
    "# Test case\n",
    "my_tuple = (1, 2, 3, 4, 5)\n",
    "\n",
    "rotated_tuple = rotate_tuple_left(my_tuple, 2)\n",
    "\n",
    "print(rotated_tuple)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8aed65d0-38e0-4e83-bb67-48a9b58bfd72",
   "metadata": {},
   "source": [
    "## 40. Rotate a tuple to the right by `n` positions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "b4bd29b5-0657-4809-8df4-2d39c651cf20",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(4, 5, 1, 2, 3)\n"
     ]
    }
   ],
   "source": [
    "def rotate_tuple_left(input_tuple, n):\n",
    "   \n",
    "    return input_tuple[-n:] + input_tuple[:-n]\n",
    "\n",
    "# Test case\n",
    "my_tuple = (1, 2, 3, 4, 5)\n",
    "\n",
    "rotated_tuple = rotate_tuple_left(my_tuple, 2)\n",
    "\n",
    "print(rotated_tuple)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ddfc6ae3-59a9-45ce-8c09-f8db3df02348",
   "metadata": {},
   "source": [
    "# Set Based Practice Problem :"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00de0469-3422-401b-9389-e0592e5d871c",
   "metadata": {},
   "source": [
    "## 1. Create a set with integers from 1 to 5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "aa9d3733-9b2a-4094-bd9c-bacee11b8cf9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 2, 3, 4, 5}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "set"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_set = set()\n",
    "for i in range(1,6):\n",
    "    my_set.add(i)\n",
    "    \n",
    "print(my_set)\n",
    "type(my_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9c87e351-c383-4424-ad8c-64cd88176808",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 2. Add an element to a set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e89ea005-9d90-40d3-8748-cb549c3bb3c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 2, 3, 4, 5, 15}\n"
     ]
    }
   ],
   "source": [
    "my_set.add(15)\n",
    "print(my_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9fe3983f-d5a7-4577-b679-06c679781174",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 3. Remove an element from a set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "eb48e9ac-f03d-4f38-8903-894b7491e61d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 2, 3, 15}\n"
     ]
    }
   ],
   "source": [
    "my_set.remove(4)\n",
    "print(my_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "59952e32-b5e3-4ebe-8561-33f37a8cac5b",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 4. Check if an element exists in a set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b3abf988-b9d1-447b-831a-4cc1f7c0e34f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Present\n"
     ]
    }
   ],
   "source": [
    "mySet = {1, 2, 3, 4, 5, 15}\n",
    "num1=3\n",
    "num2=12\n",
    "if 3 in mySet:\n",
    "    print(\"Present\")\n",
    "else:\n",
    "    print(\"Not Present\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "44ce74d4-ee3b-49d0-909f-3970d0ba4892",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 5. Find the length of a set without using the `len()` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b55c1443-175b-4622-bdd6-76d81aa9ff81",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lrngth is  6\n"
     ]
    }
   ],
   "source": [
    "mySet = {1, 2, 3, 4, 5, 15}\n",
    "\n",
    "len = 0\n",
    "\n",
    "for num in mySet:\n",
    "    len+=1\n",
    "    \n",
    "print(\"lrngth is \",len)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "060fe8c5-dbbe-4b9f-9269-a9230843d8ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 6. Clear all elements from a set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8ac6ca3e-7694-4a68-b446-143832917138",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "set()\n"
     ]
    }
   ],
   "source": [
    "mySet = {1, 2, 3, 4, 5, 15}\n",
    "mySet.clear()\n",
    "print(mySet)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b6740aac-9206-4ee9-838e-70d80dc9c7c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 7. Create a set of even numbers from 1 to 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8d93d306-fb73-4eb8-a5d1-0910ec188677",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{2, 4, 6, 8, 10}\n"
     ]
    }
   ],
   "source": [
    "mySet = set()\n",
    "\n",
    "for num in range(1,11):\n",
    "    if num%2==0:\n",
    "        mySet.add(num)\n",
    "print(mySet)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "02483bba-ed08-48b4-aefe-b437febb5331",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 8. Create a set of odd numbers from 1 to 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f50b4e60-1729-405c-9c29-ddce04415e77",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 3, 5, 7, 9}\n"
     ]
    }
   ],
   "source": [
    "mySet = set()\n",
    "\n",
    "for num in range(1,11):\n",
    "    if num%2==0:\n",
    "        pass\n",
    "    else:\n",
    "        mySet.add(num)\n",
    "print(mySet)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "9583c75c-1258-4320-aabe-c5dc1dc8ac54",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 9. Find the union of two sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "156e31e8-867b-4bfc-a2a3-5bca99d39449",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 2, 3, 4, 5, 6, 7, 8, 9}\n"
     ]
    }
   ],
   "source": [
    "set1={1, 3, 5, 7, 9}\n",
    "set2 ={2,3,4,5,6,7,8,9}\n",
    "\n",
    "set3 = set1.union(set2)\n",
    "print(set3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "a5e7b4f9-c99f-4c71-b691-5693063d8b74",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 10. Find the intersection of two sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "6ef65241-31cf-4c7a-8a98-4ae10f070d45",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{9, 3, 5, 7}\n"
     ]
    }
   ],
   "source": [
    "set1={1, 3, 5, 7, 9}\n",
    "set2 ={2,3,4,5,6,7,8,9}\n",
    "\n",
    "set3 = set1.intersection(set2)\n",
    "print(set3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6e314373-a220-49b4-9f41-6dee476f1f99",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 11. Find the difference between two sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "7451108e-3307-4827-b5fd-1fd46ff735dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1}\n"
     ]
    }
   ],
   "source": [
    "set1={1, 3, 5, 7, 9}\n",
    "set2 ={2,3,4,5,6,7,8,9}\n",
    "\n",
    "set3 = set1-(set2)\n",
    "print(set3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "734fd2bf-94c7-4554-b702-6a5690f2c3cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 12. Check if a set is a subset of another set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "becf0066-8949-4f24-9b16-dd1d25edb801",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "set1 = {1, 2, 3}\n",
    "set2 = {1, 2, 3, 4, 5}\n",
    "\n",
    "is_subset = set1.issubset(set2)\n",
    "\n",
    "print(is_subset) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a030de50-5be0-4649-a4e0-67a136be329b",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 13. Check if a set is a superset of another set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "c11d9f21-afe4-4120-991f-34ad4b5d125b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "set1 = {1, 2, 3, 4, 5}\n",
    "set2 = {1, 2, 3}\n",
    "\n",
    "# Check if set1 is a superset of set2\n",
    "is_superset = set1.issuperset(set2)\n",
    "\n",
    "print(is_superset)  # True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "304db16d-485c-472b-be92-5eba73027113",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 14. Create a set from a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "7d4fdb44-d9f8-4d36-9417-c66129bb3f17",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 2, 3, 4, 6, 76, 45}\n"
     ]
    }
   ],
   "source": [
    "lst1 = [1,2,3,4,45,76,45,3,4,6]\n",
    "myset = set(lst1)\n",
    "print(myset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "619f90c7-1ae9-48c0-baea-626188646acf",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 15. Convert a set to a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "1dafc341-7dc7-45ad-8630-83ce7bb50f1e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 6, 76, 45]\n"
     ]
    }
   ],
   "source": [
    "set1 = {1, 2, 3, 4, 6, 76, 45}\n",
    "lst1 = list(set1)\n",
    "print(lst1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "72b6fb86-26e2-4da5-ac07-6700bec9ce7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 16. Remove a random element from a set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "963b4b5b-7012-4ff0-841d-59aaf8507b3d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Removed element: 1\n",
      "Updated set: {2, 3, 4, 5}\n"
     ]
    }
   ],
   "source": [
    "my_set = {1, 2, 3, 4, 5}\n",
    "\n",
    "removed_element = my_set.pop()\n",
    "\n",
    "print(\"Removed element:\", removed_element)\n",
    "print(\"Updated set:\", my_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "b8d9ac2e-ab47-49e6-a8f6-5cf89a0bb429",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 17. Pop an element from a set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "cd10b2eb-167b-4464-8321-a657656fae8f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Removed element: 1\n",
      "Updated set: {2, 3, 4, 5}\n"
     ]
    }
   ],
   "source": [
    "my_set = {1, 2, 3, 4, 5}\n",
    "\n",
    "removed_element = my_set.pop()\n",
    "\n",
    "print(\"Removed element:\", removed_element)\n",
    "print(\"Updated set:\", my_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "ef16bd5a-e9f3-4b09-a625-ab0614e9a4cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 18. Check if two sets have no elements in common."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "72f99312-da6d-4f2a-8b97-160a2dce70b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "set1 = {1, 2, 3}\n",
    "set2 = {4, 5, 6}\n",
    "\n",
    "are_disjoint = set1.isdisjoint(set2)\n",
    "\n",
    "print(are_disjoint) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "7c798674-261e-43c8-a048-d19c078cef4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 19. Find the symmetric difference between two sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "5e0924dd-31b7-4252-808b-abd3065564c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 2, 5, 6}\n"
     ]
    }
   ],
   "source": [
    "set1 = {1, 2, 3, 4}\n",
    "set2 = {3, 4, 5, 6}\n",
    "\n",
    "symmetric_diff = set1.symmetric_difference(set2)\n",
    "\n",
    "print(symmetric_diff)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "a95436ae-ccd9-4606-9c12-acdd6d8c7538",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 20. Update a set with elements from another set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "b29361f0-7bdb-4dff-9e76-a077b8800408",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 2, 3, 4, 5}\n"
     ]
    }
   ],
   "source": [
    "set1 = {1, 2, 3}\n",
    "set2 = {3, 4, 5}\n",
    "\n",
    "set1 = set1.union(set2)\n",
    "\n",
    "print(set1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "1059ea8b-c01d-4ec2-bb80-1db1b0f23ab3",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 22. Check if two sets are identical."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "200300fd-ec92-42c0-93b4-fec83f2b6639",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "set1 = {1, 2, 3}\n",
    "set2 = {3, 2, 1}\n",
    "\n",
    "are_identical = set1 == set2\n",
    "\n",
    "print(are_identical) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "d5ce2ef1-cedd-4dfb-b516-c2af4fc05942",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 23. Create a frozen set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "a85e655b-d0fd-4da4-a5c9-a0580b917d60",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "frozenset({1, 2, 3, 4, 5})\n"
     ]
    }
   ],
   "source": [
    "my_set = {1, 2, 3, 4, 5}\n",
    "\n",
    "frozen_set = frozenset(my_set)\n",
    "\n",
    "print(frozen_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "34217414-b2e1-4471-ba5b-ceb80a0706f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 24. Check if a set is disjoint with another set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "887276cd-380e-43ca-b207-5e5c050a109c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "set1 = {1, 2, 3}\n",
    "set2 = {4, 5, 6}\n",
    "\n",
    "are_disjoint = set1.isdisjoint(set2)\n",
    "\n",
    "print(are_disjoint)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "906b1fd9-fa8b-4032-8d56-d3a3cfa62e6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 25. Create a set of squares of numbers from 1 to 5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "e5063d58-df0a-43ae-933b-7002ec4ee3ed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 4, 9, 16, 25}\n"
     ]
    }
   ],
   "source": [
    "squares_set = {x ** 2 for x in range(1, 6)}\n",
    "\n",
    "print(squares_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1c25059-f7db-48da-9b87-44b4fbd77c75",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 26. Filter out all even numbers from a set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "00965f75-e5bd-49cc-9671-510eee95705a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "mySet = {1, 4, 9, 16, 25}\n",
    "\n",
    "for num in mySet:\n",
    "    if num%2==0:\n",
    "        print(num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2269cabe-0aa4-4fb2-84d7-7209e59d33be",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 27. Multiply all elements in a set by 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f9fd0385-6240-4877-862a-e75d57054110",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{32, 2, 8, 18, 50}\n"
     ]
    }
   ],
   "source": [
    "mySet = {1, 4, 9, 16, 25}\n",
    "squareSet = {x*2 for x in mySet}\n",
    "print(squareSet)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "081bfde7-e58c-4e27-9c77-cfaa7bb94d11",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 28. Create a set of random numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "94a88eae-eddf-443c-81a7-979a2671883d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{32, 45, 81, 49, 31}\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "random_set = set(random.sample(range(1, 101), 5))\n",
    "\n",
    "print(random_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "915fad6b-3d23-48c6-a301-287e1407447a",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 29. Check if a set is empty."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "847e2a35-ae5d-4111-907d-11ded7665238",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The set is empty\n"
     ]
    }
   ],
   "source": [
    "my_set1 = {}\n",
    "my_set1 = {1,2,3}\n",
    "\n",
    "\n",
    "if len(my_set) == 0:\n",
    "    print(\"The set is empty\")\n",
    "else:\n",
    "    print(\"The set is not empty\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9668c9c4-08e5-488a-882b-c5daf55cd9f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 30. Create a nested set (hint: use frozenset)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "076a1df3-3d15-4ac5-ae15-0369ecd5b6fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{frozenset({1, 2, 3}), frozenset({4, 5, 6})}\n"
     ]
    }
   ],
   "source": [
    "inner_set1 = frozenset([1, 2, 3])\n",
    "inner_set2 = frozenset([4, 5, 6])\n",
    "\n",
    "nested_set = set([inner_set1, inner_set2])\n",
    "\n",
    "print(nested_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "372200a6-35d6-46da-af35-1d700a489443",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 31. Remove an element from a set using the discard method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2360ca4f-2395-46f1-8d64-be2674742749",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 2, 4, 5}\n"
     ]
    }
   ],
   "source": [
    "my_set = {1, 2, 3, 4, 5}\n",
    "my_set.discard(3)\n",
    "print(my_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ac44873f-04b9-457f-96b6-6ca6f25a7799",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 32. Compare two sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f1176b2c-7b74-4467-976f-8e05ee043e4c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The sets are equal\n"
     ]
    }
   ],
   "source": [
    "set1 = {1, 2, 3}\n",
    "set2 = {3, 2, 1}\n",
    "\n",
    "if set1 == set2:\n",
    "    print(\"The sets are equal\")\n",
    "else:\n",
    "    print(\"The sets are not equal\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4903c50b-9a14-4ff7-86ca-d4e39e0ee3a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 33. Create a set from a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "70113019-5c4d-4344-8cb9-6ca36935deb6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'h', 'o', 'e', 'l'}\n"
     ]
    }
   ],
   "source": [
    "my_string = \"hello\"\n",
    "\n",
    "my_set =set()\n",
    "\n",
    "for char in my_string:\n",
    "    my_set.add(char)\n",
    "\n",
    "print(my_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc17de6f-a77f-4168-af52-0c2c94461786",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 34. Convert a set of strings to a set of integers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4ffb6262-85e4-411b-9734-7235a5edb3bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 2, 3}\n"
     ]
    }
   ],
   "source": [
    "set1 = {'1', '2', '3'}\n",
    "integerSet = set()\n",
    "\n",
    "for string in set1:\n",
    "    integer = int(string)\n",
    "    integerSet.add(integer)\n",
    "    \n",
    "print(integerSet)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0cc40d19-b50b-4de0-bc0e-401165c871b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 35. Convert a set of integers to a set of strings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "802d3e1e-16ce-4cec-933d-9acf6b611ddc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'2', '3', '1'}\n"
     ]
    }
   ],
   "source": [
    "set1 = {1, 2, 3}\n",
    "stringSet = set()\n",
    "\n",
    "for int in set1:\n",
    "    string = str(int)\n",
    "    stringSet.add(string)\n",
    "    \n",
    "print(stringSet)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "132274b7-7c6f-4385-83b0-080d5cb555c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 36. Create a set from a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b5056c7c-249a-4b83-9fd9-19b2a9ceaf49",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 2, 3, 4, 5, 6, 13}\n"
     ]
    }
   ],
   "source": [
    "tup = (1,2,3,13,4,5,6)\n",
    "\n",
    "mySet = set(tup)\n",
    "\n",
    "print(mySet)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3c928f9-3279-461a-8542-b2cfb9386c69",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 37. Convert a set to a tuple."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "616cc073-13da-4786-8bcc-70a4629da33e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 3, 4, 5, 6, 13)\n"
     ]
    }
   ],
   "source": [
    "mySet = {1, 2, 3, 4, 5, 6, 13}\n",
    "\n",
    "myTuple = tuple(mySet)\n",
    "print(myTuple)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88f83d7e-6ce3-4fd0-802b-41ede9d54cc9",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 38. Find the maximum value in a set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f9b71ece-bf2b-4189-98c7-25008e90932f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13\n"
     ]
    }
   ],
   "source": [
    "mySet = {1, 2, 3, 4, 5, 6, 13}\n",
    "maxVal = max(mySet)\n",
    "print(maxVal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ab38556-76f1-45a0-b7aa-32be16073938",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 39. Find the minimum value in a set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "7ebb2565-ed22-486b-acaf-847c13aaed8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "mySet = {1, 2, 3, 4, 5, 6, 13}\n",
    "minVal = min(mySet)\n",
    "print(minVal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d61f3bb5-c7ac-4745-9cca-47cd7882fb8b",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 40. Create a set from user input."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "61d4155b-4d32-4151-891a-1a1dc18eb29d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter elements separated by spaces or commas:  1,2,3,4,56,67\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The set you created: {'1,2,3,4,56,67'}\n"
     ]
    }
   ],
   "source": [
    "\n",
    "user_input = input(\"Enter elements separated by spaces or commas: \")\n",
    "input_elements = user_input.split()\n",
    "user_set = set(input_elements)\n",
    "\n",
    "print(\"The set you created:\", user_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b324ef4-df44-4191-9fd0-c9fffe0d4104",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 41. Check if the intersection of two sets is empty."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "06ade4bc-cefc-46e2-8f1e-b5bbc5f4a77a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The intersection is empty\n"
     ]
    }
   ],
   "source": [
    "set1 = {1, 2, 3}\n",
    "set2 = {4, 5, 6}\n",
    "\n",
    "if set1.isdisjoint(set2):\n",
    "    print(\"The intersection is empty\")\n",
    "else:\n",
    "    print(\"The intersection is not empty\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "11ed46de-45e9-4659-842d-3f7a5bb61eb7",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 42. Create a set of the first 5 Fibonacci numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "cec50515-c02e-4f2c-8253-ad40747150f3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{0, 1, 2, 3}\n"
     ]
    }
   ],
   "source": [
    "fibonacci_set = set()\n",
    "a, b = 0, 1\n",
    "\n",
    "for _ in range(5):\n",
    "    fibonacci_set.add(a)\n",
    "    a, b = b, a + b\n",
    "\n",
    "print(fibonacci_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5ccf868-3d0c-4fcf-96c9-d0c8bea259cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 43. Remove duplicates from a list using sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "625edbbf-c54e-430f-9ebf-ff056f2b4494",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5]\n"
     ]
    }
   ],
   "source": [
    "my_list = [1, 2, 2, 3, 4, 4, 5]\n",
    "\n",
    "my_list_without_duplicates = list(set(my_list))\n",
    "print(my_list_without_duplicates)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4fa5f34-0e58-448e-a0c8-eb7b83a15729",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 44. Check if two sets have the same elements, regardless of their count."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b6a6a432-0cca-48a6-a55e-77050a446c63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The sets have the same elements.\n"
     ]
    }
   ],
   "source": [
    "set1 = {1, 2, 3, 4}\n",
    "set2 = {4, 3, 2, 1}\n",
    "\n",
    "if set1 == set2:\n",
    "    print(\"The sets have the same elements.\")\n",
    "else:\n",
    "    print(\"The sets do not have the same elements.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae72d682-58f4-45d1-b646-3e16a99715d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 45. Create a set of the first `n` powers of 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "225d56ab-4ee2-4f2f-a74f-6aceef1b604a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 2, 4, 8, 16}\n"
     ]
    }
   ],
   "source": [
    "n = 5\n",
    "powers_of_2_set = set()\n",
    "\n",
    "for i in range(n):\n",
    "    power_of_2 = 2 ** i\n",
    "    powers_of_2_set.add(power_of_2)\n",
    "\n",
    "print(powers_of_2_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc162404-15fd-402b-a855-75f20924023f",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 46. Find the common elements between a set and a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c5d5a0cf-761c-424b-bf65-50bd77a9b01a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{3, 4, 5}\n"
     ]
    }
   ],
   "source": [
    "my_set = {1, 2, 3, 4, 5}\n",
    "my_list = [3, 4, 5, 6, 7]\n",
    "\n",
    "common_elements = my_set.intersection(my_list)\n",
    "\n",
    "print( common_elements)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fcae44da-0256-4a3a-8d8f-70750401a6ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 47. Create a set of the first `n` triangular numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "efcc3c5a-746e-4a96-adc8-78aea3d96ef5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d904a45-e8c0-4f39-bcbd-c5dcd14eff9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 48. Check if a set contains another set as a subset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "3b6caa70-c3bb-42c1-a0db-e10baeec5496",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "set2 is a subset of set1\n"
     ]
    }
   ],
   "source": [
    "set1 = {1, 2, 3, 4, 5}\n",
    "set2 = {2, 3}\n",
    "\n",
    "if set2.issubset(set1):\n",
    "    print(\"set2 is a subset of set1\")\n",
    "else:\n",
    "    print(\"set2 is not a subset of set1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5099b16d-20bb-4a62-ba4e-189ead84209c",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 49. Create a set of alternating 1s and 0s of length `n`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "1c127139-353a-471b-968f-564c4dcc0415",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{0, 1}\n"
     ]
    }
   ],
   "source": [
    "n = 10  \n",
    "alternating_set = {1 if i % 2 == 0 else 0 for i in range(n)}\n",
    "\n",
    "print(alternating_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6ac0c3e4-2a43-43e0-bdfb-33045c534d44",
   "metadata": {},
   "outputs": [],
   "source": [
    "## 50. Merge multiple sets into one."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "58744bb9-6cdb-48b8-9a2e-af2cd23757a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 2, 3, 4, 5, 6, 7}\n"
     ]
    }
   ],
   "source": [
    "set1 = {1, 2, 3}\n",
    "set2 = {3, 4, 5}\n",
    "set3 = {5, 6, 7}\n",
    "\n",
    "merged_set = set1.union(set2, set3)\n",
    "\n",
    "print(merged_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f5eba324-7860-4f41-87cd-3a20b7fadf52",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a0b1322-f8d5-437d-835e-00ac41ea96f5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "867f006e-ec44-459b-8a22-1dc2e4cf752e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf23f36e-a605-42b9-8846-6b4b853aaa69",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0d067906-abe5-4bca-a303-0e6dbe0780e8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "472cf29e-b986-4c65-88b0-11e8b0edbb3b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b288dde-3484-484c-b767-e977273aa426",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "72954fac-a65e-40ee-a683-407d32d0e4db",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a48f3f9a-a5bc-4f20-910f-39887ac7f244",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7170664-5692-4682-b5b8-0e3247202d04",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
